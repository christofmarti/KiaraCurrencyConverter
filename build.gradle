import java.io.File;
import java.util.List;

import org.gradle.api.tasks.Input;
import org.gradle.api.tasks.InputDirectory;
import org.gradle.api.tasks.Optional;
import org.gradle.api.tasks.OutputDirectory;

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.fiware.kiara:kiaragen-gradle-plugin:0.1.0"
        classpath "us.kirchmeier:gradle-capsule-plugin:0.10.0"
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.fiware.kiara.kiaragen'
apply plugin: 'us.kirchmeier.capsule'

sourceCompatibility = 1.7
group = 'com.example'
version = '1.0'
description = "KIARA Currency Converter Demo"

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile group: 'org.fiware.kiara', name: 'KIARA', version: '0.1.1'
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Currency Converter', 'Implementation-Version': version
    }
}

kiaragen {
    //sourceDir = project.file("src/main/idl")
    //outputDir = project.file("${buildDir}/generated-src/kiara")
    //idlExtension = 'idl'
    //platform = 'java'
    //example = false
    //platform = 'java'
    //srcPath = ''
    //javaPackage = null
    //example = false
    //ppDisable = true
    //ppPath = null
    //tempDir = null;
    //includePaths = []
}
    
// additional tasks e.g. runClient/runServer
task runClient(type: JavaExec) {
    group 'running'
    description 'Runs Client'
    dependsOn 'classes'
    main = 'com.example.CurrencyClient'
    classpath = sourceSets.main.runtimeClasspath
    args ''
}

task runServer(type: JavaExec) {
    group 'running'
    description 'Runs Server'
    dependsOn 'classes'
    main = 'com.example.CurrencyServer'
    classpath = sourceSets.main.runtimeClasspath
    args ''
}

// create 
task clientJar (type:FatCapsule) {
    group 'build'
    description "Build executable JAR for client using capsule"
    applicationClass 'com.example.CurrencyClient'
    classifier = "client"
    capsuleManifest.applicationName = project.group+".CurrencyServer"
    capsuleManifest.applicationVersion = project.version
    capsuleManifest.minJavaVersion = '1.7.0'
    //capsuleManifest.extractCapsule = false  // false in case of ThinCapsule
    capsuleManifest.repositories << 'local'  // remove for production
    capsuleManifest.repositories << 'central'
}

task serverJar (type:FatCapsule) {
    group 'build'
    description "Build executable JAR for server using capsule"
    applicationClass 'com.example.CurrencyServer'
    classifier = "server"
    capsuleManifest.applicationName = project.group+".CurrencyClient"
    capsuleManifest.applicationVersion = project.version
    capsuleManifest.minJavaVersion = '1.7.0'
    //capsuleManifest.extractCapsule = false  // false in case of ThinCapsule
    capsuleManifest.repositories << 'local'  // remove for production
    capsuleManifest.repositories << 'central'
}

    
/* 
 * DEBUG tasks
 */
task printSourceSets << {
    
    sourceSets.each() { sourceSet ->
        String taskName = sourceSet.getTaskName('','kiaragen')
        println "${sourceSet}"
        println "Name: ${sourceSet.name}"
        println "ClassesTaskName: ${sourceSet.classesTaskName}"
        println "CompileConfigName: ${sourceSet.compileConfigurationName}"
        println "CompileClasspath: ${sourceSet.compileClasspath}"
        println "CompileJavaTaskName: ${sourceSet.compileJavaTaskName}"
        println "JarTaskName: ${sourceSet.jarTaskName}"
        println "JavaSrc: ${sourceSet.java}"
        println "Output: ${sourceSet.output}"
        println "ResourcesProcessTask: ${sourceSet.processResourcesTaskName}"
        println "Resources: ${sourceSet.resources}"
        println "RuntimeConfigName: ${sourceSet.runtimeConfigurationName}"
        println "RuntimeClasspath: ${sourceSet.runtimeClasspath}"
        println "AllJava: ${sourceSet.allJava}"
        println "AllSource: ${sourceSet.allSource}"
        println "taskname: ${taskName}"
        
        
//        println "Dependencies: ${sourceSet.dependencies}"
//        println "Artifacts: ${sourceSet.artifacts}"
//        println "Hierarchy: ${sourceSet.hierarchy}"
//        println "Visible: ${sourceSet.visible}"
        println "------------"

    }
    println "${project.sourceSets.main.java.srcDirs}"
}

task printConfigurations << {
    configurations.each() { configuration ->
        println "${configuration}"
        println "Name: ${configuration.name}"
        println "Description: ${configuration.description}"
        println "Dependencies: ${configuration.dependencies}"
        println "Artifacts: ${configuration.artifacts}"
        println "Hierarchy: ${configuration.hierarchy}"
        println "Visible: ${configuration.visible}"
        println "------------"
        
    }
}

task printKiaragenInfo << {
    Task kiaragen = project.tasks.kiaragen
    println "${kiaragen}"
    println "${kiaragen.convention}"
    println kiaragen.conventionMapping
    println kiaragen.extensions
    println "${project.sourceSets.main.java.srcDirs}"
    println kiaragen.platform
    println kiaragen.example
    println kiaragen.sourceDir
    println kiaragen.tempDir
}
