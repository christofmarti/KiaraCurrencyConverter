/* KIARA - Middleware for efficient and QoS/Security-aware invocation of services and exchange of messages
 *
 * Copyright (C) 2014 Proyectos y Sistemas de Mantenimiento S.L. (eProsima)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 *
 *
 * @file CurrencyExchangeServantExample.java
 * This file contains the servant implementation.
 *
 * This file was generated by using the tool kiaragen.
 *
 */

package com.example;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * Class where the actual implementation of the procedures is located.
 *
 * @author Kiaragen tool.
 *
 */
class CurrencyExchangeServantFakeImpl extends CurrencyExchangeServant {

    /*
     * !
     * 
     * @brief This method implements the proxy part of the protocol for the
     * operation lookup. It has to be implemented by the child classes.
     */

    public ExchangeRate lookup(String fromCurrency, String toCurrency) 
    {
        return data.get(fromCurrency+toCurrency);
    }

    /*
     * !
     * 
     * @brief This method implements the proxy part of the protocol for the
     * operation convert. It has to be implemented by the child classes.
     */
    public float convert(String fromCurrency, String toCurrency, float amount) {
        ExchangeRate exchange = data.get(fromCurrency+toCurrency);
        if (exchange != null) {
            if (amount == 0) amount = 1;
            return (float)(exchange.getRate() * amount);
        }
        return (float) 0.0;
    }

    private static Map<String, ExchangeRate> data = new HashMap<String, ExchangeRate>();
    static {
        data.put("EURCHF", createExchange("EUR", "CHF", 1.2018f, 1.2019f, 1.2018f, new Date().getTime()));
        data.put("CHFEUR", createExchange("CHF", "EUR", 0.8321f, 0.8322f, 0.8321f, new Date().getTime()));
        data.put("EURUSD", createExchange("EUR", "USD", 1.1907f, 1.1908f, 1.1907f, new Date().getTime()));
        data.put("USDEUR", createExchange("USD", "EUR", 0.8397f, 0.8397f, 0.8397f, new Date().getTime()));
        data.put("USDCHF", createExchange("USD", "CHF", 1.0092f, 1.0094f, 1.0089f, new Date().getTime()));
        data.put("CHFUSD", createExchange("CHF", "USD", 0.9911f, 0.9912f, 0.9911f, new Date().getTime()));
    };

    private static ExchangeRate createExchange(String from, String to, 
            float rate, float ask, float bid, long timestamp) {
        ExchangeRate exchange = new ExchangeRate();
        exchange.setId(from+to);
        exchange.setFrom(from);
        exchange.setTo(to);
        exchange.setRate(rate);
        exchange.setAsk(ask);
        exchange.setBid(bid);
        exchange.setTimestamp(timestamp);
        return exchange;
    }
    // get info from yahoo with the following command:
    // curl -X GET -H "Content-type: application/json" 
    //  -H "Accept: application/json" "http://download.finance.yahoo.com/d/
    //  quotes.csv?s=EURCHF=X&f=snl1d1t1ab&e=.cs"
    
}
